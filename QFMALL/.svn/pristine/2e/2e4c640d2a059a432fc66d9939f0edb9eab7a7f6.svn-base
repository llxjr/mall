package cn.funwx.mall.controller.wx;

import cn.funwx.mall.common.Constants;
import cn.funwx.mall.common.WxConfig;
import cn.funwx.mall.dto.WxUserInfoDTO;
import cn.funwx.mall.pojo.User;
import cn.funwx.mall.service.UserLoginService;
import cn.funwx.mall.service.impl.WxUserRegisterService;
import cn.funwx.mall.utils.*;
import net.sf.json.JSONObject;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

/**
 * 青蜂微信验证
 *
 * @author chj
 * @date 2017-12-6
 */
@RestController
@RequestMapping("auth")
public class WxAuthController {

    private static Logger LOG = LoggerFactory.getLogger(WxAuthController.class);

    @Autowired
    private HttpService httpService;

    @Autowired
    private UserLoginService userLoginService;

    @Autowired
    private WxUserRegisterService service;

    @Autowired
    private RedisUtil redisUtil;



    /**
     * 解密用户敏感数据
     *
     * @param encryptedData 明文,加密数据
     * @param iv            加密算法的初始向量
     * @param code          用户允许登录后，回调内容会带上 code（有效期五分钟），开发者需要将 code 发送到开发者服务器后台，使用code 换取 session_key api，将 code 换成 openid 和 session_key
     * @return
     */
    @SuppressWarnings("all")
    @RequestMapping(value = "/decodeUserInfo", method = RequestMethod.GET)
    public Map decodeUserInfo(@RequestParam String encryptedData,
                              @RequestParam String iv,
                              @RequestParam String code) {

        Map map = new HashMap();
        //登录凭证不能为空
        if (code == null || code.length() == 0) {
            map.put("status", 0);
            map.put("msg", "code 不能为空");
            return map;
        }
        //////////////// 1、向微信服务器 使用登录凭证 code 获取 session_key 和 openid ////////////////
        //请求参数
        Map params = new HashMap();
        params.put("appid", WxConfig.WX_APP_ID);
        params.put("secret", WxConfig.WX_APP_SECRET);
        params.put("js_code", code);
        params.put("grant_type", "authorization_code");
        //请求url
        String url = "https://api.weixin.qq.com/sns/jscode2session";
        //发送请求
        String str = "";
        try {
            str += httpService.doGet(url, params);
        } catch (Exception e) {
            LOG.error(e.getMessage());
            e.printStackTrace();
            map.put("status", 0);
            map.put("msg", "解密失败");
            return map;
        }
        //解析相应内容（转换成json对象）
        String session_key = "";
        if (StringUtils.isNotEmpty(str)) {
            JSONObject json = JSONObject.fromObject(str);
            //获取会话密钥（session_key）
            session_key = json.get("session_key").toString();
            //用户的唯一标识（openid）
            String openid = (String) json.get("openid");
        }
        //////////////// 2、对encryptedData加密数据进行AES解密 ////////////////
        try {
            com.alibaba.fastjson.JSONObject userInfoJSON = AesCbcUtil.decrypt(encryptedData, session_key, iv);
            if (null != userInfoJSON) {
                map.put("status", 1);
                map.put("msg", "解密成功");
                Map userInfo = new HashMap();
                userInfo.put("openId", userInfoJSON.get("openId"));
                userInfo.put("nickName", userInfoJSON.get("nickName"));
                userInfo.put("gender", userInfoJSON.get("gender"));
                userInfo.put("city", userInfoJSON.get("city"));
                userInfo.put("province", userInfoJSON.get("province"));
                userInfo.put("country", userInfoJSON.get("country"));
                userInfo.put("avatarUrl", userInfoJSON.get("avatarUrl"));
                userInfo.put("unionId", userInfoJSON.get("unionId"));
                map.put("userInfo", userInfo);
                return map;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        map.put("status", 0);
        map.put("msg", "解密失败");
        return map;
    }

    /**
     * 小程序用户注册
     *
     * @param dto
     * @return
     */
    @RequestMapping("/validWxUser")
    @ResponseBody
    public Result validWxUser(@RequestBody WxUserInfoDTO dto) {
        User wxUser = userLoginService.getUserByUnionId(dto.getUnionId());
        //没有该用户进行注册
        if (wxUser == null) {
            try {
                User usr = new User();
                usr.setUnionId(dto.getUnionId());
                usr.setOpenId(dto.getOpenId());
                usr.setNickName(dto.getNickName());
                usr.setAvatarUrl(dto.getAvatarUrl());
                usr.setProvince(dto.getProvince());
                usr.setCity(dto.getCity());
                usr.setGender(dto.getGender());
                service.execute(usr, null);
            } catch (Exception e) {
                LOG.error("小程序用户unionId为 {} 验证失败！", dto.getUnionId());
                return Result.err("小程序用户创建失败！");
            }
        }
        return Result.suc();
    }

    /**
     * 已有微信用户绑定手机
     * @param unionId
     * @param phoneNum
     * @param password
     * @param verifyCode
     * @return
     */
    @RequestMapping("bindPhoneNum")
    @ResponseBody
    public Result bindPhoneNum(@RequestParam String unionId, @RequestParam String phoneNum,
                               @RequestParam String password, @RequestParam String verifyCode) {
        User wxUsr = userLoginService.getUserByUnionId(unionId);
        if (wxUsr == null) {
            return Result.err("账号异常请重新授权！");
        }
        User mobileUsr = userLoginService.getUserByPhoneNum(phoneNum);
        if (mobileUsr != null) {
            return Result.err("该手机号码已存在，绑定失败！");
        }
        String key = Constants.MOBILE_REG_CACHE_PREFIX + phoneNum;
        try {
            String val = redisUtil.get(key);
            if (verifyCode == null || val == null || !verifyCode.equals(val)) {
                return Result.err("验证码错误！");
            }
            wxUsr.setPassword(EncryptUtil.MD5Encrypt(password));
//            wxUsr.setLoginName(phoneNum);//登陆账号暂不设置
            wxUsr.setPhoneNum(phoneNum);
            userLoginService.update(wxUsr);
        } catch (Exception e) {
            LOG.error("微信用户绑定手机失败", e);
            return Result.err("绑定异常！");
        }
        return Result.suc();
    }
}
