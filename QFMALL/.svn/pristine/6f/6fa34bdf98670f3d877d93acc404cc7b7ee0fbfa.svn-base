package cn.funwx.mall.controller.wx;

import cn.funwx.mall.common.PaymentParamsBuilder;
import cn.funwx.mall.common.WxConfig;
import cn.funwx.mall.pojo.User;
import cn.funwx.mall.service.UserLoginService;
import cn.funwx.mall.utils.BussinessNoUtils;
import cn.funwx.mall.utils.Result;
import cn.funwx.mall.utils.WxPayUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/**
 * @author chj
 * @description 小程序微信支付
 * @date 2018/9/5 14:02
 */
@Controller
@RequestMapping("/wxPay")
public class WxPaymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WxPaymentController.class);

    @Autowired
    private UserLoginService userLoginService;

    /**
     * 预付款
     *
     * @param openId
     * @param totalFee 总金额
     * @param payBody  付款明细
     * @return
     */
    @RequestMapping("prePay")
    @ResponseBody
    public Result prePay(@RequestParam String unionId, @RequestParam String openId,
                         @RequestParam Float totalFee, @RequestParam String payBody,
                         HttpServletRequest request) {
        User user = userLoginService.getUserByUnionId(unionId);
        if (user == null) {
            return Result.err("用户校验失败请重新授权");
        }
        if (StringUtils.isBlank(openId) || totalFee == null || totalFee <= 0) {
            return Result.err("付款参数校验异常！");
        }

        String orderNo = null;
        try {
            orderNo = BussinessNoUtils.nextOrderNo(user.getAuthorityCode());
        } catch (Exception e) {
            LOGGER.error("生成订单号异常", e);
            return Result.err("生成订单异常！");
        }
        String xmlStr = null;
        Map<String, String> requestParams = new HashMap<String, String>();
        try {
            requestParams = PaymentParamsBuilder
                    .bulidWxRequestParams(request, openId, totalFee, orderNo, payBody);
            xmlStr = PaymentParamsBuilder.bulidWxRequestXMLStr(requestParams);
        } catch (Exception e) {
            LOGGER.error("生成签名异常", e);
            return Result.err("支付流程异常！");
        }
        LOGGER.info("正在调用微信统一下单接口");

        try {
            String result = WxPayUtils.httpRequest(WxConfig.WX_PAY_URL, "POST", xmlStr);
            Map map = WxPayUtils.doXMLParse(result);
            //返回状态码
            String returnCode = map.get("return_code").toString();
            if (StringUtils.isNotBlank(returnCode) && returnCode.equals("SUCCESS")) {
                Map<String, Object> resultMap = new HashMap<String, Object>();
                Long timesamp = System.currentTimeMillis() / 1000;
                String prepayId = map.get("prepay_id").toString();
                String tempSignStr = "appId=" + WxConfig.WX_APP_ID + "&nonceStr=" + requestParams.get("nonce_str")
                        + "&package=prepay_id=" + prepayId + "&signType=MD5&timeStamp=" + timesamp;
                //二次签名用于小程序接口
                String twiceSign = WxPayUtils.sign(tempSignStr, WxConfig.WX_APP_SECRET, "utf-8").toUpperCase();

                resultMap.put("package", "prepay_id=" + prepayId);
                resultMap.put("paySign", twiceSign);
                resultMap.put("nonceStr", requestParams.get("nonce_str"));
                resultMap.put("timeSamp", timesamp);
                resultMap.put("appId", WxConfig.WX_APP_ID);

                Result sucRe = Result.suc();
                sucRe.setData(resultMap);
                return sucRe;
            }
        } catch (Exception e) {
            LOGGER.error("调用微信统一下单接口失败", e);
            return Result.err("支付失败！");
        }
        return Result.err("支付失败");
    }

    /**
     * 回调接口
     *
     * @param request
     * @param response
     * @throws Exception
     */
    @RequestMapping(value = "/notifyCallback")
    @ResponseBody
    public void wxNotify(HttpServletRequest request, HttpServletResponse response) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader((ServletInputStream) request.getInputStream()));
        String line = null;
        StringBuilder sb = new StringBuilder();
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();
        String notityXml = sb.toString();
        String resXml = "";
        LOGGER.info("接收到的报文：" + notityXml);

        Map map = WxPayUtils.doXMLParse(notityXml);

        String returnCode = (String) map.get("return_code");
        if ("SUCCESS".equals(returnCode)) {
            //验证签名是否正确
            Map<String, String> validParams = WxPayUtils.paraFilter(map);  //回调验签时需要去除sign和空值参数
            String validStr = WxPayUtils.createLinkString(validParams);//把数组所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串
            String sign = WxPayUtils.sign(validStr, WxConfig.WX_APP_SECRET, "utf-8").toUpperCase();//拼装生成服务器端验证的签名
            //根据微信官网的介绍，此处不仅对回调的参数进行验签，还需要对返回的金额与系统订单的金额进行比对等
            if (sign.equals(map.get("sign"))) {
                /**此处添加自己的业务逻辑代码start**/

                /**此处添加自己的业务逻辑代码end**/
                //通知微信服务器已经支付成功
                resXml = "<xml>" + "<return_code><![CDATA[SUCCESS]]></return_code>"
                        + "<return_msg><![CDATA[OK]]></return_msg>" + "</xml> ";
            }
        } else {
            resXml = "<xml>" + "<return_code><![CDATA[FAIL]]></return_code>"
                    + "<return_msg><![CDATA[报文为空]]></return_msg>" + "</xml> ";
        }
        LOGGER.info("微信支付回调数据结束");

        BufferedOutputStream out = new BufferedOutputStream(
                response.getOutputStream());
        out.write(resXml.getBytes());
        out.flush();
        out.close();
    }

}
