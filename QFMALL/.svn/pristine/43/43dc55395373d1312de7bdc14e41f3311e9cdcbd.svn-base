package cn.funwx.mall.controller.font;

import cn.funwx.mall.common.Constants;
import cn.funwx.mall.pojo.User;
import cn.funwx.mall.service.UserLoginService;
import cn.funwx.mall.service.impl.MobileUserRegisterService;
import cn.funwx.mall.utils.EncryptUtil;
import cn.funwx.mall.utils.Result;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author chj
 * @description
 * @date 2018/8/20 21:34
 */
@RequestMapping("/")
@Controller
public class UserLoginController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserLoginController.class);
    @Autowired
    private UserLoginService userLoginService;

    @Autowired
    private MobileUserRegisterService proccesor;

    /**
     * 首页
     **/
    private static final String INDEX_PAGE = "/index";
    /**
     * 登录页面
     **/
    private static final String LOGIN_PAGE = "/user/login";
    /**
     * 注册页面
     **/
    private static final String REGISTER_PAGE = "/user/register";

    @RequestMapping("")
    public ModelAndView index() {
        return new ModelAndView(INDEX_PAGE);
    }

    @RequestMapping("/index")
    public ModelAndView indexPage() {
        return new ModelAndView(INDEX_PAGE);
    }

    /**
     * 登录页面
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping("/login")
    public ModelAndView loginPage(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute(Constants.SESSION_USER);
        if (user == null) {
            return new ModelAndView(LOGIN_PAGE);
        }
        return new ModelAndView(INDEX_PAGE);
    }

    @RequestMapping("/register")
    public ModelAndView registerPage(HttpServletRequest request, HttpServletResponse response) {
        return new ModelAndView(REGISTER_PAGE);
    }

    /**
     * 登录 暂时先写手机登录
     * @param request
     * @param loginName
     * @param password
     * @return
     */
    @RequestMapping("/doLogin")
    @ResponseBody
    public Result doLogin(HttpServletRequest request, @RequestParam String loginName,
                          @RequestParam String password) {
        request.getSession().removeAttribute(Constants.SESSION_USER);
        User user = userLoginService.getUserByPhoneNum(loginName);
        if (user != null) {
            final String pwd = password != null ? EncryptUtil.MD5Encrypt(password.trim()) : "";
            if (user.getPassword() != null && pwd.equals(user.getPassword())) {
                //记录操作时间等
                request.getSession().setAttribute(Constants.SESSION_USER, user);
                return Result.suc();
            }
        }
        return Result.err("用户或密码错误!");
    }

    /**
     * 注册
     * @param request
     * @param loginName 登录名（微信 QQ 手机）
     * @param password 密码
     * @param verifyCode 验证码
     * @param regType 账号类型
     * @return
     */
    @RequestMapping("/doRegister")
    @ResponseBody
    public Result doRegister(HttpServletRequest request, @RequestParam String loginName
            , @RequestParam String password, @RequestParam String verifyCode, @RequestParam Integer regType) {
        Result res = null;
        try {
            User usr = new User();
            usr.setLoginName(loginName);
            usr.setPassword(EncryptUtil.MD5Encrypt(password));
            usr.setAccountRegType(regType);
            res = proccesor.execute(usr, verifyCode);
        }catch (Exception e){
            LOGGER.error("用户注册失败！", e);
            return Result.err("用户注册失败！");
        }
        return res;
    }

    /**
     * 获取验证码
     * @param loginName
     * @return
     */
    @RequestMapping("/getVerifyCode")
    @ResponseBody
    public Result getVerifyCode(@RequestParam String loginName){
        final String key = Constants.MOBILE_REG_CACHE_PREFIX + loginName;
        Integer vCode = userLoginService.getVerifyCode(key);
        if (vCode == null) {
            return Result.err("获取验证码失败！");
        }
        //发送短信
        Result result = new Result(vCode);
        result.success();
        return result;
    }
}
